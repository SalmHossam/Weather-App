pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'salmahossam20/weather-app:latest'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/SalmHossam/Weather-App.git', branch: 'main'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'No dependencies to install for static project'
            }
        }

    stage('Build') {
    steps {
        script {
            // Define the Docker image with a unique tag, e.g., using BUILD_ID
            def dockerImage = "salmahossam20/your-image-name:${env.BUILD_ID}"

            echo 'Stopping and removing existing container...'
            // Stop and remove any container using the previous image (if any)
            sh """
                docker ps -q --filter ancestor=${dockerImage} | xargs -r docker stop
                docker ps -a -q --filter ancestor=${dockerImage} | xargs -r docker rm
            """

            echo 'Removing previous Docker image if it exists...'
            // Remove the previous image if it exists
            sh "docker rmi -f ${dockerImage} || true"

            echo 'Building Docker image...'
            sh "docker build -t ${dockerImage} ."

            echo 'Logging into Docker registry...'
            sh "docker login -u salmahossam20 -p Salma@12345"

            echo 'Pushing Docker image to registry...'
            sh "docker push ${dockerImage}"
        }
    }
}



        // Moved the Pull and Run Docker stages inside the main stages block
        stage('Pull Docker Image') {
            steps {
                script {
                    // Pull the Docker image from a public registry
                    sh "docker pull ${DOCKER_IMAGE}"
                }
            }
        }
        stage('Remove Container') {
            steps {
                script {
                    // remove the container from the pulled image
                    sh """
                        docker stop weather-app-container
                        docker rm -f weather-app-container
                    """
                }
            }
        }



        stage('Run Docker Container') {
            steps {
                script {
                    // Run the container from the pulled image
                    sh """
                        docker run -d -p 8090:80 --name weather-app-container ${DOCKER_IMAGE}
                    """
                }
            }
        }

         stage('Test') {
            steps {
                echo 'Testing the project'
                sh 'curl http://localhost:8090'
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Build and deployment successful.'
        }
        failure {
            echo 'Build or deployment failed.'
        }
    }
}
